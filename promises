27/01/2025

Promise:
--A promise is a special java script object that represents the eventual completion (or failure) of an asynchronous operation.
It allows to handle asynchronous tasks more efficiently than callbacks

Three states:
1) pending: the iitial state, the promise is still waiting for the operation to finds.
2) fulfilled: The operation completed successfully.
3) Rejected: The operation failed;

Exp :
1)	To create a promise-new promise( )
Two parameters-
Resolve – to mark the promise as successfully
Reject-mark it as failed 
2)	Handling the result:
.then( ) method is called when promise is fulfilled.
It will receives the result from resolve( )
.catch( )  method is called if the promise is rejected it receives the error message from reject( )

Example( ):
 
Let mypromise = new Promise((resolve ,reject)=> {
Let success =true;
If(success){
resolve (“The operatin is successful” );
}else{
reject(“The operation failed”)
}
});
mypromise
.then(result=>{
cosole.log(result);
});
.catch(error =>{
console.log(error);
})

O/P:
The operation is successful

Chaining promises:
Ex:
let promise= new promise((resolve , reject) => {
resolve(5);
///initial resolve value is 5
})
Promise
.then( result => {
Console.log(result);
Return result *2
//return a new value
})
.then( result => {
Console.log(result);
return result +3
///returns a new value
})
.then(result => {
console.log(result);
})
.catch(error => {
Console.log(“error”,error))

O/P:
5
10
13


Ex:
 promise with setTimeOut
--asynchronous task using setTimeOut, and the promise will resolve after a certain amount of time.
let pro=new Promise((resolve,reject)=>{
        resolve(5);
    })
    pro.then(result=>{
        console.log(result)
        setTimeout((pro)=>{
            console.log("success")
        },3000)
    })


o/p:
5
Success



